package javaStudy;
import java.util.Scanner;

//자바의 예외 처리
/*
 예외(Exception)란? 
 : 자바에서 오동작이나 결과에 악영향을 미칠 수 있는 실행 중 발생한 오류를
 예외(exception)라고 한다. 문법에 맞지 않게 작성된 코드는 사전에 
 컴파일러에 의해 컴파일 오류(compile time error)로 걸러지지만,
 예외는 사용자의 잘못된 입력이나 배열의 인덱스가 배열의 크기를 넘어가는 등,
 예기치 못한 상황에 의해 프로그램 실행 중에 발생한다.
 실행 중에 예외가 발생하는 몇 가지 경우를 나열해보자.
 
  - 정수를 0으로 나누는 경우
  - 배열의 크기보다 큰 인덱스로 배열의 원소를 접근하는 경우
  - 존재하지 않는 파일을 읽으려고 하는 경우
  - 정수 입력을 기다리는 코드가 실행되고 있을 때, 사용자가 문자를 입력한 경우 
  
 실행 중에 예외가 발생하면 자바 플랫폼이 가장 먼저 알게되어, 현재실행 중인
 응용 프로그램에게 예외를 전달한다. 만일 응용프로그램이 예외에 대처하하는 코드를
 가지고 있지 않다면, 자바 플랫폼은 응용프로그램을 곧바로 종료시킨다. 
 */

/*
 예외(exception)와 실행시간 오류(run-time error)는 어떻게 다른가? 
 실행시간 오류는 조건문이 잘못 작성된 반복문이 무한루프를 실행하거나 
 recursion을 제어하는 코드를 잘못 작성하여 스택이 계속 쌓여(스택 오버플로) 
 JVM의 메모리가 부족할 때까지 실행되는 등 언제 어디서 발생할지 예측할 수 없고,
 발생하였을 때 시스템이나 사용자에게 해를 주거나 강제로 프로그램을 종료시키지 않으면
 멈출 수 없는 경우이다.
 하지만 예외란 사용자 프로그램에서 try-catch 블록을 이용하여 제어할(handling) 수
 있는 실행시간 오류이다. 파일을 여는 코드나 나누기하는 코드 등을 작성할 때 파일을
 열지 못할 수 있고, 0으로 나누기가 이루어질 수 있음을 알고, 또 이런 상황에
 발생하였을 때는 try-catch 블록을 이용하여 문제를 바로 잡아(recoverable) 계속
 실행되게하거나, 시스템이나 사용자에게 해를 끼치지 않으면서 정상적인 방법으로
 프로그램을 종료시킬 수 있도록 제어 가능한 경우이다. 
 */


public class Ex3_14 {
//0으로 나누기 예외 발생으로 프로그램이 강제 종료되는 경우 
	/*
  두 정수를 입력받아 나눗셈을 하고 몫을 구하는 프로그램 코드이다. 
  사용자가 나누는 수에 0을 입력하면 ArithmticException예외가
  발생하여 프로그램이 강제 종료된다.
	 */
	
	public static void main(String[] args) {
	
		Scanner scanner = new Scanner(System.in); 
		int dividend; //나뉨수
		int divisior; //나눗수
		
		System.out.print("나뉨수를 입력하시오:");
		dividend = scanner.nextInt(); //나뉨수 입력
		System.out.print("나눗수를 입력하시오:");
		divisior = scanner.nextInt(); //나눗수 입력
		System.out.println(dividend+"를 " + divisior + "로 나누면 몫은 "
				 + dividend/divisior + " 입니다.");
		//dividend/divisor에서 divisor가 0이면 예외가 발생한다
		//JVM은 정수를 0으로는 나눌 수 없기 때문이다. 
		
		/*이 예제 프로그램은 이 예외에 대한 대처 코드가 없기 때문에 자바 플랫폼에 의해 강제 종료된다.
		 사용자가 0을 입력하는 예외상황은 컴파일시에 미리 걸러낼 수 없지만 
		 예외가 발생할 때, 응용프로그램이 이에 적절히 대응함으로써(handling) 강제 종료되지
		 않고 사용자의 입력을 다시 받는 등 별도의 조치를 취할 수 있다.
		 */
		scanner.close();
	}
}