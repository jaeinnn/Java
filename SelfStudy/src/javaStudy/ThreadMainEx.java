package javaStudy;

/* 
컴퓨터 기술 용어로서 멀티태스킹은 여러 프로그램 코드(작업,태스크)가 동시에 실행되는 것을 말한다.
간단한 응용프로그램은 보통 하나의 작업(태스크)만 하는 경우가 대부분이지만, 큰 규모의 응용프로그램은 많은 경우 여러 작업(태스크)을 동시에 실행한다.
응용프로그램의 여러 작업(태스크)이 동시에 진행되게 하는 기법으로,응용프로그램의 목적을 효율적으로 달성하게 한다. 

스레드(thread) : 멀티태스킹 응용프로그램 작성을 위함.컴퓨터 용어로 사용되는 스레드는 실의 의미와 일맥상통한다.   
컴퓨터에서 사용하는 스레드(thread)는 thread of control의 준말로서 프로그램 코드를 실행하는 하나의 실 혹은 제어의 개념이다. 
하나의 실로 하나의 바느질밖에 할 수 없듯이 하나의 스레드로 하나의 작업밖에 처리할 수 없다.

구체적으로 스레드는 운영체제나 JVM에서 태스크(작업)를 실행하는 단위로서, 운영체제나 JVM에 의해 관리되는 단위이다. 
자바 스레드에만 국한시켜 설명해보면, JVM은 하나의 태스크(작업)를 실행하기 위해 하나의 스레드를 만들고,스레드로 하여금 태스크 코드를 실행하도록 한다.
멀티태스킹을 실현하기 위해 2가지 방법이 사용되고 있다. 멀티프로세싱(multi-processing)은 
하나의 응용프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업(태스크)을 처리하도록 하는 기법이다. 
각 프로세스는 고유한 메모리 영역을 보유하고 독립적으로 실행된다. 
그러므로 하나의 응용프로그램에 속하는 프로세스들은 변수를 공유할 수 없기 때문에, 프로세스들 사이의 통신(IPC, Inter Process Communication)이 어렵고 한다 해도 오버헤드가 크다. 
또한 프로세스 사이의 문맥 교환(context switch)에 따른 과도한 작업량과 시간 소모의 문제점이 있다.
이러한 문제점을 개선하기 위해 제안된 방법이 멀티스레딩(multi-threading)이다. 
멀티스레딩은 하나의 응용프로그램을 동시처리가 가능한 여러 작업(코드)으로 분할하고 작업의 개수만큼 스레드를 생성하여 각 스레드로 하여금 하나의 작업을 처리하도록 하는 기법이다. 
모든 스레드는 응용프로그램 내의 자원과 메모리를 공유하므로 통신에 따른 오버헤드가 작고, 스레드 사이의 문맥 교환시 소요되는 작업량이 많아 문맥 교환이 빠르다는 장점이 있다. 
윈도우, 리눅스 등 많은 운영체제들이 멀티프로세싱을 지원하고 있지만 멀티스레딩을 기본으로 하고 있다. 
*/

/*
 main()을 실행하는 main스레드
 
 JVM은 자바 응용 프로그램을 실행하기 직전, 사용자 스레드를 하나 만들고,
 이 스레드로 하여금 main()메소드를 실행하도록 한다.
 이 스레드가 메인스레드이고 실행 시작 주소는 main() 메소드의 첫 코드가 된다.
 
 자바 응용프로그램의 main()메소드가 실행되는 순간 2개의 스레드가 존재하는 셈이다
 하나는 main스레드이고 다른 하나는 JVM내에 자동으로 생성된 가비지 컬렉션 스레드이다 
 */

public class ThreadMainEx {
	public static void main(String[] args) {
		
		long id = Thread.currentThread().getId(); //스레드 ID 얻기
		String name = Thread.currentThread().getName(); //스레드 이름 얻기
		int priority = Thread.currentThread().getPriority(); //스레드 우선순위값 얻기 
		
		Thread.State s = Thread.currentThread().getState(); //스레드 상태값 얻기
		
		System.out.println("현재 스레드 이름 = " + name);
		System.out.println("현재 스레드 ID = " + id);
		System.out.println("현재 스레드 우선순위 값 = " + priority);
		System.out.println("현재 스레드 상태  = " + s);
	}

}
